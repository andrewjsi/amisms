Index: at_command.c
===================================================================
--- at_command.c	(revision 24)
+++ at_command.c	(working copy)
@@ -133,7 +133,7 @@
        static const char cmd19[] = "AT+CSSN=1,1\r";
        static const char cmd21[] = "AT+CSCS=\"UCS2\"\r";

-       static const char cmd22[] = "AT+CPMS=\"ME\",\"ME\",\"ME\"\r";
+       static const char cmd22[] = "AT+CPMS=\"SM\",\"SM\",\"SM\"\r";
        static const char cmd23[] = "AT+CNMI=2,1,0,0,0\r";
        static const char cmd24[] = "AT+CSQ\r";

Index: at_response.c
===================================================================
--- at_response.c	(revision 24)
+++ at_response.c	(working copy)
@@ -1198,9 +1198,17 @@
 		pvt_try_restate(pvt);
 
 		cmgr = err_pos = ast_strdupa (str);
-		err = at_parse_cmgr (&err_pos, len, oa, sizeof(oa), &oa_enc, &msg, &msg_enc);
-		if (err)
+		err = at_parse_cmgr (&err_pos, len, oa, sizeof(oa), &oa_enc, &msg, &msg_enc); // YYY
+		if (err == (void*)0x1) /* HACK! */
 		{
+			char buf[64];
+			int res = (int)msg;
+			snprintf(buf, 64, "Delivered\r\nForeignID: %d", res);
+			manager_event_sent_notify(PVT_ID(pvt), "SMS", 0x0 /* task is popped */, buf);
+			return 0;
+		}
+		else if (err)
+		{
 			ast_log (LOG_WARNING, "[%s] Error parsing incoming message '%s' at possition %d: %s\n", PVT_ID(pvt), str, (int)(err_pos - cmgr), err);
 			return 0;
 		}
@@ -1721,11 +1729,23 @@
 			case RES_CSSU:
 			case RES_SRVST:
 			case RES_CVOICE:
-			case RES_CMGS:
 			case RES_CPMS:
 			case RES_CONF:
 				return 0;
 
+			case RES_CMGS:
+				/* Abuse the fact that we know how the manager
+				 * message are formatted: CRLF separated headers
+				 * with colon between key and value */
+				{
+					char buf[64];
+					int res = at_parse_cmgs(str);
+					const at_queue_task_t * task = at_queue_head_task (pvt);
+					snprintf(buf, 64, "Sending\r\nForeignID: %d", res);
+					manager_event_sent_notify(PVT_ID(pvt), "SMS", task, buf);
+				}
+				return 0;
+
 			case RES_OK:
 				at_response_ok (pvt, at_res);
 				return 0;
Index: pdu.c
===================================================================
--- pdu.c	(revision 24)
+++ pdu.c	(working copy)
@@ -797,10 +797,35 @@
 					err = "Can't parse length of OA";
 				}
 			}
+			else if(PDUTYPE_MTI(pdu_type) == PDUTYPE_MTI_SMS_STATUS_REPORT)
+			{
+				int reference = pdu_parse_byte(pdu, &pdu_length);
+				/* Skip over 8 bytes TP-DA */
+				if (reference >= 0 && pdu_length >= 8) {
+					(*pdu) += 8;
+					pdu_length -= 8;
+					/* Skip over 7 bytes timestamp TP-SCTS */
+					if (pdu_parse_timestamp(pdu, &pdu_length) >= 0 &&
+					    /* Skip over 7 bytes timestamp TP-DT */
+					    pdu_parse_timestamp(pdu, &pdu_length) >= 0) {
+						int tp_status = pdu_parse_byte(pdu, &pdu_length);
+						if ((tp_status & 0xf) == 0) {
+							err = (void*)0x1; /* HACK! */
+							*msg = (void*)reference;
+						} else {
+							err = "Good report, but delivery failed";
+						}
+					} else {
+						err = "FIXME error 1";
+					}
+				} else {
+					err = "FIXME error 2";
+				}
+			}
 			else
 			{
 				*pdu -= 2;
-				err = "Unhandled PDU Type MTI only SMS-DELIVER supported";
+				err = "Unhandled PDU Type MTI only SMS-DELIVER/SMS-STATUS-REPORT supported";
 			}
 		}
 		else
Index: at_parse.c
===================================================================
--- at_parse.c	(revision 24)
+++ at_parse.c	(working copy)
@@ -385,6 +385,27 @@
 	return rv;
 }
 
+/*!
+ * \brief Parse a +CMGS notification
+ * \param str -- string to parse (null terminated)
+ * \return -1 on error (parse error) or the first integer value found
+ * \todo FIXME: parse <mr>[,<scts>] value correctly
+ */
+
+EXPORT_DEF int at_parse_cmgs (const char* str)
+{
+	int cmgs = -1;
+
+	/*
+	 * parse CMGS info in the following format:
+	 * +CMGS:<mr>[,<scts>]
+	 * (sscanf is lax about extra spaces)
+	 * TODO: not ignore parse errors ;)
+	 */
+	sscanf (str, "+CMGS:%d", &cmgs);
+	return cmgs;
+}
+
  /*!
  * \brief Parse a CUSD answer
  * \param str -- string to parse (null terminated)
Index: at_parse.h
===================================================================
--- at_parse.h	(revision 24)
+++ at_parse.h	(working copy)
@@ -15,6 +15,7 @@
 EXPORT_DECL int at_parse_creg (char* str, unsigned len, int* gsm_reg, int* gsm_reg_status, char** lac, char** ci);
 EXPORT_DECL int at_parse_cmti (const char* str);
 EXPORT_DECL const char* at_parse_cmgr (char** str, size_t len, char* oa, size_t oa_len, str_encoding_t* oa_enc, char** msg, str_encoding_t* msg_enc);
+EXPORT_DECL int at_parse_cmgs (const char* str);
 EXPORT_DECL int at_parse_cusd (char* str, int * type, char ** cusd, int * dcs);
 EXPORT_DECL int at_parse_cpin (char* str, size_t len);
 EXPORT_DECL int at_parse_csq (const char* str, int* rssi);
